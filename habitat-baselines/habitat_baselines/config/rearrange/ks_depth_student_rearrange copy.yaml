# @package _global_

defaults:
  - /benchmark/rearrange: ks_depth_student_rearrange
  - /habitat_baselines: habitat_baselines_rl_config_base
  - /habitat/simulator/sim_sensors@habitat_baselines.eval.extra_sim_sensors.third_rgb_sensor: third_rgb_sensor
  - /habitat_baselines/rl/policy/obs_transforms:
    - add_virtual_keys_base
  - /habitat_baselines/rl/policy: ks_monolithic
  - /habitat_baselines/rl/policy/hierarchical_policy/defined_skills: ks_nn_skills
  - _self_

habitat_baselines:
  verbose: False
  trainer_name: "ksppo"
  updater_name: "KSPPO"
  torch_gpu_id: 0
  tensorboard_dir: "task/ks_depth_student_navpick_zero_5m_10m/tb"
  video_dir: "task/ks_depth_student_navpick_zero_5m_10m/video_dir"
  video_fps: 30
  test_episode_count: -1
  eval_ckpt_path_dir: "task/ks_depth_student_navpick_zero_5m_10m/checkpoints"
  checkpoint_folder: "task/ks_depth_student_navpick_zero_5m_10m/checkpoints"
  num_environments: 10 ## fix 1
  writer_type: 'tb'
  num_updates: -1
  total_num_steps: 2.0e7
  log_interval: 10
  num_checkpoints: 100
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True
  eval_keys_to_include_in_name: ['reward', "num_steps", 'success']
  load_resume_state_config: True
  rollout_storage_name: "KickstartingStorage"
  eval:
    video_option: ["disk"]

  rl:
    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 1
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.001
      lr: 3e-4
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 1024
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50

      use_normalized_advantage: False

      hidden_size: 512

      # Use double buffered sampling, typically helps
      # when environment time is similar or larger than
      # policy inference time during rollout generation
      use_double_buffered_sampler: False
    ksppo:
      # ksppo params
      init_kickstarting_coef: 10 # 1
      min_kickstarting_coef: 0.1 #0.01
      kickstarting_coef_descent: 0.02
      pretrain_flag: False

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether the visual encoder backbone will be trained.
      train_encoder: True
      # Whether to reset the critic linear layer
      reset_critic: True

      # Model parameters
      backbone: resnet18
      rnn_type: MLP
      num_recurrent_layers: 2
